import Head from 'next/head'
import styles from '../../styles/Home.module.css'
import { Header } from '../components/header'
import ProductCard from '../components/product.card'
import { useEffect, useState } from 'react'
import { Footer } from '../components/footer'
import { Grid, Box, InputLabel, MenuItem, FormControl } from '@mui/material'
import Select, { SelectChangeEvent } from '@mui/material/Select'
import * as React from 'react'
import CategoryProps from '../props/category.props'
import ProductProps from '../props/product.props'
import { fetchProductData } from '../services/products/productsServices'
import { fetchCategoryData } from '../services/categories/CategoriesServices'
import Cart from '../components/cart'

export default function Home() {
  const [categories, setCategories] = useState([])
  const [products, setProducts] = useState([])
  const [selectedCategory, setSelectedCategory] = useState('')

  const handleCategoryChange = async (event: SelectChangeEvent) => {
    const targetCategoryId: string = event.target.value
    setSelectedCategory(targetCategoryId)
    fetchProductData().then((products) => {
      const filteredProducts = products.filter((product: ProductProps) => product.category_id === targetCategoryId)
      setProducts(filteredProducts)
    })
  }

  useEffect(() => {
    fetchProductData().then((product) => {
      setProducts(product)
    })
    fetchCategoryData().then((categories) => {
      setCategories(categories)
    })
  }, [])

  const [cartItem, setCartItem] = useState<ProductProps[]>([])
  const handleAddToCart = (clickedItem: ProductProps) => {
    setCartItem((prev) => {
      const isItemInCart = prev.find((props) => props.id === clickedItem.id)

      if (isItemInCart) {
        return prev.map((props) => (props.id === clickedItem.id ? { ...props, amount: props.amount + 1 } : props))
      }

      return [...prev, { ...clickedItem, amount: 1 }]
    })
  }

  const handleRemoveFromCart = (id: number) => {
    setCartItem((prev) =>
      prev.reduce((acc, item) => {
        if (item.id === id) {
          if (item.amount === 1) return acc
          return [...acc, { ...item, amount: item.amount - 1 }]
        } else {
          return [...acc, item]
        }
      }, [] as ProductProps[])
    )
  }

  const calculateTotal = (items: ProductProps[]) => items.reduce((acc, item) => acc + item.amount * item.price, 0)
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main className={styles.main}>
        <Box sx={{ minWidth: 200 }}>
          <FormControl fullWidth>
            <InputLabel id="demo-simple-select-label">Categorie</InputLabel>
            <Select
              labelId="demo-simple-select-label"
              id="demo-simple-select"
              label="Categorie"
              value={selectedCategory}
              onChange={handleCategoryChange}
            >
              {categories.map((category: CategoryProps) => {
                return (
                  <MenuItem key={category.id} value={category.id}>
                    {category.title}
                  </MenuItem>
                )
              })}
            </Select>
          </FormControl>
        </Box>

        <Grid container spacing={5} rowSpacing={5}>
          {products.map((filteredProduct: ProductProps) => {
            return (
              <Grid key={filteredProduct.id} item xs={3}>
                <ProductCard props={filteredProduct} handleAddToCart={handleAddToCart}></ProductCard>
              </Grid>
            )
          })}
        </Grid>
        <br />
        <br />
        <Grid container rowSpacing={5}>
          <Cart cartItems={cartItem} addToCart={handleAddToCart} removeFromCart={handleRemoveFromCart} />
        </Grid>
      </main>
      <Footer />
    </div>
  )
}
